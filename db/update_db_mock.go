// Code generated by MockGen. DO NOT EDIT.
// Source: update_db.go
//
// Generated by this command:
//
//	mockgen -source=update_db.go -destination=./update_db_mock.go -package=db
//

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	types "github.com/0xsoniclabs/substate/types"
	updateset "github.com/0xsoniclabs/substate/updateset"
	leveldb "github.com/syndtr/goleveldb/leveldb"
	iterator "github.com/syndtr/goleveldb/leveldb/iterator"
	util "github.com/syndtr/goleveldb/leveldb/util"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateDB is a mock of UpdateDB interface.
type MockUpdateDB struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateDBMockRecorder
	isgomock struct{}
}

// MockUpdateDBMockRecorder is the mock recorder for MockUpdateDB.
type MockUpdateDBMockRecorder struct {
	mock *MockUpdateDB
}

// NewMockUpdateDB creates a new mock instance.
func NewMockUpdateDB(ctrl *gomock.Controller) *MockUpdateDB {
	mock := &MockUpdateDB{ctrl: ctrl}
	mock.recorder = &MockUpdateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateDB) EXPECT() *MockUpdateDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUpdateDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUpdateDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUpdateDB)(nil).Close))
}

// Compact mocks base method.
func (m *MockUpdateDB) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockUpdateDBMockRecorder) Compact(start, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockUpdateDB)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockUpdateDB) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUpdateDBMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUpdateDB)(nil).Delete), key)
}

// DeleteCode mocks base method.
func (m *MockUpdateDB) DeleteCode(arg0 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCode indicates an expected call of DeleteCode.
func (mr *MockUpdateDBMockRecorder) DeleteCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCode", reflect.TypeOf((*MockUpdateDB)(nil).DeleteCode), arg0)
}

// DeleteUpdateSet mocks base method.
func (m *MockUpdateDB) DeleteUpdateSet(block uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUpdateSet", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUpdateSet indicates an expected call of DeleteUpdateSet.
func (mr *MockUpdateDBMockRecorder) DeleteUpdateSet(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUpdateSet", reflect.TypeOf((*MockUpdateDB)(nil).DeleteUpdateSet), block)
}

// Get mocks base method.
func (m *MockUpdateDB) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUpdateDBMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUpdateDB)(nil).Get), arg0)
}

// GetCode mocks base method.
func (m *MockUpdateDB) GetCode(arg0 types.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockUpdateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockUpdateDB)(nil).GetCode), arg0)
}

// GetFirstKey mocks base method.
func (m *MockUpdateDB) GetFirstKey() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstKey")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstKey indicates an expected call of GetFirstKey.
func (mr *MockUpdateDBMockRecorder) GetFirstKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstKey", reflect.TypeOf((*MockUpdateDB)(nil).GetFirstKey))
}

// GetLastKey mocks base method.
func (m *MockUpdateDB) GetLastKey() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastKey")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastKey indicates an expected call of GetLastKey.
func (mr *MockUpdateDBMockRecorder) GetLastKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastKey", reflect.TypeOf((*MockUpdateDB)(nil).GetLastKey))
}

// GetUpdateSet mocks base method.
func (m *MockUpdateDB) GetUpdateSet(block uint64) (*updateset.UpdateSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateSet", block)
	ret0, _ := ret[0].(*updateset.UpdateSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpdateSet indicates an expected call of GetUpdateSet.
func (mr *MockUpdateDBMockRecorder) GetUpdateSet(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateSet", reflect.TypeOf((*MockUpdateDB)(nil).GetUpdateSet), block)
}

// Has mocks base method.
func (m *MockUpdateDB) Has(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockUpdateDBMockRecorder) Has(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockUpdateDB)(nil).Has), arg0)
}

// HasCode mocks base method.
func (m *MockUpdateDB) HasCode(arg0 types.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCode", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCode indicates an expected call of HasCode.
func (mr *MockUpdateDBMockRecorder) HasCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCode", reflect.TypeOf((*MockUpdateDB)(nil).HasCode), arg0)
}

// HasUpdateSet mocks base method.
func (m *MockUpdateDB) HasUpdateSet(block uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasUpdateSet", block)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasUpdateSet indicates an expected call of HasUpdateSet.
func (mr *MockUpdateDBMockRecorder) HasUpdateSet(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasUpdateSet", reflect.TypeOf((*MockUpdateDB)(nil).HasUpdateSet), block)
}

// NewBatch mocks base method.
func (m *MockUpdateDB) NewBatch() Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockUpdateDBMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockUpdateDB)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockUpdateDB) NewIterator(prefix, start []byte) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockUpdateDBMockRecorder) NewIterator(prefix, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockUpdateDB)(nil).NewIterator), prefix, start)
}

// NewUpdateSetIterator mocks base method.
func (m *MockUpdateDB) NewUpdateSetIterator(start, end uint64) IIterator[*updateset.UpdateSet] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUpdateSetIterator", start, end)
	ret0, _ := ret[0].(IIterator[*updateset.UpdateSet])
	return ret0
}

// NewUpdateSetIterator indicates an expected call of NewUpdateSetIterator.
func (mr *MockUpdateDBMockRecorder) NewUpdateSetIterator(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUpdateSetIterator", reflect.TypeOf((*MockUpdateDB)(nil).NewUpdateSetIterator), start, end)
}

// Put mocks base method.
func (m *MockUpdateDB) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockUpdateDBMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUpdateDB)(nil).Put), key, value)
}

// PutCode mocks base method.
func (m *MockUpdateDB) PutCode(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCode indicates an expected call of PutCode.
func (mr *MockUpdateDBMockRecorder) PutCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCode", reflect.TypeOf((*MockUpdateDB)(nil).PutCode), arg0)
}

// PutMetadata mocks base method.
func (m *MockUpdateDB) PutMetadata(interval, size uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", interval, size)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockUpdateDBMockRecorder) PutMetadata(interval, size any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockUpdateDB)(nil).PutMetadata), interval, size)
}

// PutUpdateSet mocks base method.
func (m *MockUpdateDB) PutUpdateSet(updateSet *updateset.UpdateSet, deletedAccounts []types.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutUpdateSet", updateSet, deletedAccounts)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutUpdateSet indicates an expected call of PutUpdateSet.
func (mr *MockUpdateDBMockRecorder) PutUpdateSet(updateSet, deletedAccounts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutUpdateSet", reflect.TypeOf((*MockUpdateDB)(nil).PutUpdateSet), updateSet, deletedAccounts)
}

// Stat mocks base method.
func (m *MockUpdateDB) Stat(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockUpdateDBMockRecorder) Stat(property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockUpdateDB)(nil).Stat), property)
}

// binarySearchForLastPrefixKey mocks base method.
func (m *MockUpdateDB) binarySearchForLastPrefixKey(lastKeyPrefix []byte) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "binarySearchForLastPrefixKey", lastKeyPrefix)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// binarySearchForLastPrefixKey indicates an expected call of binarySearchForLastPrefixKey.
func (mr *MockUpdateDBMockRecorder) binarySearchForLastPrefixKey(lastKeyPrefix any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "binarySearchForLastPrefixKey", reflect.TypeOf((*MockUpdateDB)(nil).binarySearchForLastPrefixKey), lastKeyPrefix)
}

// getBackend mocks base method.
func (m *MockUpdateDB) getBackend() dbAdapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBackend")
	ret0, _ := ret[0].(dbAdapter)
	return ret0
}

// getBackend indicates an expected call of getBackend.
func (mr *MockUpdateDBMockRecorder) getBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBackend", reflect.TypeOf((*MockUpdateDB)(nil).getBackend))
}

// hasKeyValuesFor mocks base method.
func (m *MockUpdateDB) hasKeyValuesFor(prefix, start []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasKeyValuesFor", prefix, start)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasKeyValuesFor indicates an expected call of hasKeyValuesFor.
func (mr *MockUpdateDBMockRecorder) hasKeyValuesFor(prefix, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasKeyValuesFor", reflect.TypeOf((*MockUpdateDB)(nil).hasKeyValuesFor), prefix, start)
}

// newIterator mocks base method.
func (m *MockUpdateDB) newIterator(r *util.Range) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newIterator", r)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// newIterator indicates an expected call of newIterator.
func (mr *MockUpdateDBMockRecorder) newIterator(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newIterator", reflect.TypeOf((*MockUpdateDB)(nil).newIterator), r)
}

// stats mocks base method.
func (m *MockUpdateDB) stats(stats *leveldb.DBStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stats", stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// stats indicates an expected call of stats.
func (mr *MockUpdateDBMockRecorder) stats(stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stats", reflect.TypeOf((*MockUpdateDB)(nil).stats), stats)
}
