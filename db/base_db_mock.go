// Code generated by MockGen. DO NOT EDIT.
// Source: base_db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	leveldb "github.com/syndtr/goleveldb/leveldb"
	iterator "github.com/syndtr/goleveldb/leveldb/iterator"
	opt "github.com/syndtr/goleveldb/leveldb/opt"
	util "github.com/syndtr/goleveldb/leveldb/util"
	gomock "go.uber.org/mock/gomock"
)

// MockdbAdapter is a mock of dbAdapter interface.
type MockdbAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockdbAdapterMockRecorder
}

// MockdbAdapterMockRecorder is the mock recorder for MockdbAdapter.
type MockdbAdapterMockRecorder struct {
	mock *MockdbAdapter
}

// NewMockdbAdapter creates a new mock instance.
func NewMockdbAdapter(ctrl *gomock.Controller) *MockdbAdapter {
	mock := &MockdbAdapter{ctrl: ctrl}
	mock.recorder = &MockdbAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbAdapter) EXPECT() *MockdbAdapterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockdbAdapter) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockdbAdapterMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockdbAdapter)(nil).Close))
}

// CompactRange mocks base method.
func (m *MockdbAdapter) CompactRange(u util.Range) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompactRange", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompactRange indicates an expected call of CompactRange.
func (mr *MockdbAdapterMockRecorder) CompactRange(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompactRange", reflect.TypeOf((*MockdbAdapter)(nil).CompactRange), u)
}

// Delete mocks base method.
func (m *MockdbAdapter) Delete(key []byte, wo *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdbAdapterMockRecorder) Delete(key, wo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockdbAdapter)(nil).Delete), key, wo)
}

// Get mocks base method.
func (m *MockdbAdapter) Get(key []byte, ro *opt.ReadOptions) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", key, ro)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockdbAdapterMockRecorder) Get(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdbAdapter)(nil).Get), key, ro)
}

// GetProperty mocks base method.
func (m *MockdbAdapter) GetProperty(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProperty", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProperty indicates an expected call of GetProperty.
func (mr *MockdbAdapterMockRecorder) GetProperty(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProperty", reflect.TypeOf((*MockdbAdapter)(nil).GetProperty), property)
}

// Has mocks base method.
func (m *MockdbAdapter) Has(key []byte, ro *opt.ReadOptions) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", key, ro)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockdbAdapterMockRecorder) Has(key, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockdbAdapter)(nil).Has), key, ro)
}

// NewIterator mocks base method.
func (m *MockdbAdapter) NewIterator(r *util.Range, ro *opt.ReadOptions) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", r, ro)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockdbAdapterMockRecorder) NewIterator(r, ro interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockdbAdapter)(nil).NewIterator), r, ro)
}

// Put mocks base method.
func (m *MockdbAdapter) Put(key, value []byte, wo *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockdbAdapterMockRecorder) Put(key, value, wo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockdbAdapter)(nil).Put), key, value, wo)
}

// Stats mocks base method.
func (m *MockdbAdapter) Stats(s *leveldb.DBStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", s)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockdbAdapterMockRecorder) Stats(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockdbAdapter)(nil).Stats), s)
}

// Write mocks base method.
func (m *MockdbAdapter) Write(batch *leveldb.Batch, wo *opt.WriteOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", batch, wo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockdbAdapterMockRecorder) Write(batch, wo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockdbAdapter)(nil).Write), batch, wo)
}

// MockKeyValueWriter is a mock of KeyValueWriter interface.
type MockKeyValueWriter struct {
	ctrl     *gomock.Controller
	recorder *MockKeyValueWriterMockRecorder
}

// MockKeyValueWriterMockRecorder is the mock recorder for MockKeyValueWriter.
type MockKeyValueWriterMockRecorder struct {
	mock *MockKeyValueWriter
}

// NewMockKeyValueWriter creates a new mock instance.
func NewMockKeyValueWriter(ctrl *gomock.Controller) *MockKeyValueWriter {
	mock := &MockKeyValueWriter{ctrl: ctrl}
	mock.recorder = &MockKeyValueWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeyValueWriter) EXPECT() *MockKeyValueWriterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockKeyValueWriter) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockKeyValueWriterMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockKeyValueWriter)(nil).Delete), key)
}

// Put mocks base method.
func (m *MockKeyValueWriter) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockKeyValueWriterMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockKeyValueWriter)(nil).Put), key, value)
}

// MockBaseDB is a mock of BaseDB interface.
type MockBaseDB struct {
	ctrl     *gomock.Controller
	recorder *MockBaseDBMockRecorder
}

// MockBaseDBMockRecorder is the mock recorder for MockBaseDB.
type MockBaseDBMockRecorder struct {
	mock *MockBaseDB
}

// NewMockBaseDB creates a new mock instance.
func NewMockBaseDB(ctrl *gomock.Controller) *MockBaseDB {
	mock := &MockBaseDB{ctrl: ctrl}
	mock.recorder = &MockBaseDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseDB) EXPECT() *MockBaseDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBaseDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseDB)(nil).Close))
}

// Compact mocks base method.
func (m *MockBaseDB) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockBaseDBMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockBaseDB)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockBaseDB) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBaseDBMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBaseDB)(nil).Delete), key)
}

// Get mocks base method.
func (m *MockBaseDB) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBaseDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBaseDB)(nil).Get), arg0)
}

// Has mocks base method.
func (m *MockBaseDB) Has(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockBaseDBMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockBaseDB)(nil).Has), arg0)
}

// NewBatch mocks base method.
func (m *MockBaseDB) NewBatch() Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockBaseDBMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockBaseDB)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockBaseDB) NewIterator(prefix, start []byte) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockBaseDBMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockBaseDB)(nil).NewIterator), prefix, start)
}

// Put mocks base method.
func (m *MockBaseDB) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockBaseDBMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBaseDB)(nil).Put), key, value)
}

// Stat mocks base method.
func (m *MockBaseDB) Stat(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockBaseDBMockRecorder) Stat(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockBaseDB)(nil).Stat), property)
}

// binarySearchForLastPrefixKey mocks base method.
func (m *MockBaseDB) binarySearchForLastPrefixKey(lastKeyPrefix []byte) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "binarySearchForLastPrefixKey", lastKeyPrefix)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// binarySearchForLastPrefixKey indicates an expected call of binarySearchForLastPrefixKey.
func (mr *MockBaseDBMockRecorder) binarySearchForLastPrefixKey(lastKeyPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "binarySearchForLastPrefixKey", reflect.TypeOf((*MockBaseDB)(nil).binarySearchForLastPrefixKey), lastKeyPrefix)
}

// getBackend mocks base method.
func (m *MockBaseDB) getBackend() dbAdapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBackend")
	ret0, _ := ret[0].(dbAdapter)
	return ret0
}

// getBackend indicates an expected call of getBackend.
func (mr *MockBaseDBMockRecorder) getBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBackend", reflect.TypeOf((*MockBaseDB)(nil).getBackend))
}

// hasKeyValuesFor mocks base method.
func (m *MockBaseDB) hasKeyValuesFor(prefix, start []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasKeyValuesFor", prefix, start)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasKeyValuesFor indicates an expected call of hasKeyValuesFor.
func (mr *MockBaseDBMockRecorder) hasKeyValuesFor(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasKeyValuesFor", reflect.TypeOf((*MockBaseDB)(nil).hasKeyValuesFor), prefix, start)
}

// newIterator mocks base method.
func (m *MockBaseDB) newIterator(r *util.Range) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newIterator", r)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// newIterator indicates an expected call of newIterator.
func (mr *MockBaseDBMockRecorder) newIterator(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newIterator", reflect.TypeOf((*MockBaseDB)(nil).newIterator), r)
}

// stats mocks base method.
func (m *MockBaseDB) stats(stats *leveldb.DBStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stats", stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// stats indicates an expected call of stats.
func (mr *MockBaseDBMockRecorder) stats(stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stats", reflect.TypeOf((*MockBaseDB)(nil).stats), stats)
}
