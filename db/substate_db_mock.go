// Code generated by MockGen. DO NOT EDIT.
// Source: substate_db.go
//
// Generated by this command:
//
//	mockgen -source=substate_db.go -destination=./substate_db_mock.go -package=db
//

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	substate "github.com/0xsoniclabs/substate/substate"
	types "github.com/0xsoniclabs/substate/types"
	leveldb "github.com/syndtr/goleveldb/leveldb"
	iterator "github.com/syndtr/goleveldb/leveldb/iterator"
	cli "github.com/urfave/cli/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockISubstateDB is a mock of ISubstateDB interface.
type MockISubstateDB struct {
	ctrl     *gomock.Controller
	recorder *MockISubstateDBMockRecorder
	isgomock struct{}
}

// MockISubstateDBMockRecorder is the mock recorder for MockISubstateDB.
type MockISubstateDBMockRecorder struct {
	mock *MockISubstateDB
}

// NewMockISubstateDB creates a new mock instance.
func NewMockISubstateDB(ctrl *gomock.Controller) *MockISubstateDB {
	mock := &MockISubstateDB{ctrl: ctrl}
	mock.recorder = &MockISubstateDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISubstateDB) EXPECT() *MockISubstateDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockISubstateDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISubstateDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISubstateDB)(nil).Close))
}

// Compact mocks base method.
func (m *MockISubstateDB) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockISubstateDBMockRecorder) Compact(start, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockISubstateDB)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockISubstateDB) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockISubstateDBMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockISubstateDB)(nil).Delete), key)
}

// DeleteCode mocks base method.
func (m *MockISubstateDB) DeleteCode(arg0 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCode indicates an expected call of DeleteCode.
func (mr *MockISubstateDBMockRecorder) DeleteCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCode", reflect.TypeOf((*MockISubstateDB)(nil).DeleteCode), arg0)
}

// DeleteSubstate mocks base method.
func (m *MockISubstateDB) DeleteSubstate(block uint64, tx int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubstate", block, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubstate indicates an expected call of DeleteSubstate.
func (mr *MockISubstateDBMockRecorder) DeleteSubstate(block, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubstate", reflect.TypeOf((*MockISubstateDB)(nil).DeleteSubstate), block, tx)
}

// Get mocks base method.
func (m *MockISubstateDB) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockISubstateDBMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockISubstateDB)(nil).Get), arg0)
}

// GetBlockSubstates mocks base method.
func (m *MockISubstateDB) GetBlockSubstates(block uint64) (map[int]*substate.Substate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockSubstates", block)
	ret0, _ := ret[0].(map[int]*substate.Substate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockSubstates indicates an expected call of GetBlockSubstates.
func (mr *MockISubstateDBMockRecorder) GetBlockSubstates(block any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockSubstates", reflect.TypeOf((*MockISubstateDB)(nil).GetBlockSubstates), block)
}

// GetCode mocks base method.
func (m *MockISubstateDB) GetCode(arg0 types.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockISubstateDBMockRecorder) GetCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockISubstateDB)(nil).GetCode), arg0)
}

// GetFirstSubstate mocks base method.
func (m *MockISubstateDB) GetFirstSubstate() *substate.Substate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstSubstate")
	ret0, _ := ret[0].(*substate.Substate)
	return ret0
}

// GetFirstSubstate indicates an expected call of GetFirstSubstate.
func (mr *MockISubstateDBMockRecorder) GetFirstSubstate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstSubstate", reflect.TypeOf((*MockISubstateDB)(nil).GetFirstSubstate))
}

// GetLastSubstate mocks base method.
func (m *MockISubstateDB) GetLastSubstate() (*substate.Substate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSubstate")
	ret0, _ := ret[0].(*substate.Substate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSubstate indicates an expected call of GetLastSubstate.
func (mr *MockISubstateDBMockRecorder) GetLastSubstate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSubstate", reflect.TypeOf((*MockISubstateDB)(nil).GetLastSubstate))
}

// GetSubstate mocks base method.
func (m *MockISubstateDB) GetSubstate(block uint64, tx int) (*substate.Substate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubstate", block, tx)
	ret0, _ := ret[0].(*substate.Substate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubstate indicates an expected call of GetSubstate.
func (mr *MockISubstateDBMockRecorder) GetSubstate(block, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubstate", reflect.TypeOf((*MockISubstateDB)(nil).GetSubstate), block, tx)
}

// GetSubstateEncoding mocks base method.
func (m *MockISubstateDB) GetSubstateEncoding() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubstateEncoding")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSubstateEncoding indicates an expected call of GetSubstateEncoding.
func (mr *MockISubstateDBMockRecorder) GetSubstateEncoding() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubstateEncoding", reflect.TypeOf((*MockISubstateDB)(nil).GetSubstateEncoding))
}

// Has mocks base method.
func (m *MockISubstateDB) Has(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockISubstateDBMockRecorder) Has(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockISubstateDB)(nil).Has), arg0)
}

// HasCode mocks base method.
func (m *MockISubstateDB) HasCode(arg0 types.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCode", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCode indicates an expected call of HasCode.
func (mr *MockISubstateDBMockRecorder) HasCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCode", reflect.TypeOf((*MockISubstateDB)(nil).HasCode), arg0)
}

// HasSubstate mocks base method.
func (m *MockISubstateDB) HasSubstate(block uint64, tx int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasSubstate", block, tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasSubstate indicates an expected call of HasSubstate.
func (mr *MockISubstateDBMockRecorder) HasSubstate(block, tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasSubstate", reflect.TypeOf((*MockISubstateDB)(nil).HasSubstate), block, tx)
}

// NewBatch mocks base method.
func (m *MockISubstateDB) NewBatch() Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockISubstateDBMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockISubstateDB)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockISubstateDB) NewIterator(prefix, start []byte) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockISubstateDBMockRecorder) NewIterator(prefix, start any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockISubstateDB)(nil).NewIterator), prefix, start)
}

// NewSubstateIterator mocks base method.
func (m *MockISubstateDB) NewSubstateIterator(start, numWorkers int) IIterator[*substate.Substate] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSubstateIterator", start, numWorkers)
	ret0, _ := ret[0].(IIterator[*substate.Substate])
	return ret0
}

// NewSubstateIterator indicates an expected call of NewSubstateIterator.
func (mr *MockISubstateDBMockRecorder) NewSubstateIterator(start, numWorkers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubstateIterator", reflect.TypeOf((*MockISubstateDB)(nil).NewSubstateIterator), start, numWorkers)
}

// NewSubstateTaskPool mocks base method.
func (m *MockISubstateDB) NewSubstateTaskPool(name string, taskFunc SubstateTaskFunc, first, last uint64, ctx *cli.Context) *SubstateTaskPool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewSubstateTaskPool", name, taskFunc, first, last, ctx)
	ret0, _ := ret[0].(*SubstateTaskPool)
	return ret0
}

// NewSubstateTaskPool indicates an expected call of NewSubstateTaskPool.
func (mr *MockISubstateDBMockRecorder) NewSubstateTaskPool(name, taskFunc, first, last, ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewSubstateTaskPool", reflect.TypeOf((*MockISubstateDB)(nil).NewSubstateTaskPool), name, taskFunc, first, last, ctx)
}

// Put mocks base method.
func (m *MockISubstateDB) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockISubstateDBMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockISubstateDB)(nil).Put), key, value)
}

// PutCode mocks base method.
func (m *MockISubstateDB) PutCode(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCode indicates an expected call of PutCode.
func (mr *MockISubstateDBMockRecorder) PutCode(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCode", reflect.TypeOf((*MockISubstateDB)(nil).PutCode), arg0)
}

// PutSubstate mocks base method.
func (m *MockISubstateDB) PutSubstate(substate *substate.Substate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutSubstate", substate)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutSubstate indicates an expected call of PutSubstate.
func (mr *MockISubstateDBMockRecorder) PutSubstate(substate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutSubstate", reflect.TypeOf((*MockISubstateDB)(nil).PutSubstate), substate)
}

// SetSubstateEncoding mocks base method.
func (m *MockISubstateDB) SetSubstateEncoding(encoding string) (*SubstateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSubstateEncoding", encoding)
	ret0, _ := ret[0].(*SubstateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetSubstateEncoding indicates an expected call of SetSubstateEncoding.
func (mr *MockISubstateDBMockRecorder) SetSubstateEncoding(encoding any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubstateEncoding", reflect.TypeOf((*MockISubstateDB)(nil).SetSubstateEncoding), encoding)
}

// Stat mocks base method.
func (m *MockISubstateDB) Stat(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockISubstateDBMockRecorder) Stat(property any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockISubstateDB)(nil).Stat), property)
}

// getBackend mocks base method.
func (m *MockISubstateDB) getBackend() *leveldb.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBackend")
	ret0, _ := ret[0].(*leveldb.DB)
	return ret0
}

// getBackend indicates an expected call of getBackend.
func (mr *MockISubstateDBMockRecorder) getBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBackend", reflect.TypeOf((*MockISubstateDB)(nil).getBackend))
}
