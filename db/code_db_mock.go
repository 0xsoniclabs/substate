// Code generated by MockGen. DO NOT EDIT.
// Source: code_db.go

// Package db is a generated GoMock package.
package db

import (
	reflect "reflect"

	types "github.com/0xsoniclabs/substate/types"
	leveldb "github.com/syndtr/goleveldb/leveldb"
	iterator "github.com/syndtr/goleveldb/leveldb/iterator"
	util "github.com/syndtr/goleveldb/leveldb/util"
	gomock "go.uber.org/mock/gomock"
)

// MockCodeDB is a mock of CodeDB interface.
type MockCodeDB struct {
	ctrl     *gomock.Controller
	recorder *MockCodeDBMockRecorder
}

// MockCodeDBMockRecorder is the mock recorder for MockCodeDB.
type MockCodeDBMockRecorder struct {
	mock *MockCodeDB
}

// NewMockCodeDB creates a new mock instance.
func NewMockCodeDB(ctrl *gomock.Controller) *MockCodeDB {
	mock := &MockCodeDB{ctrl: ctrl}
	mock.recorder = &MockCodeDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeDB) EXPECT() *MockCodeDBMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCodeDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCodeDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCodeDB)(nil).Close))
}

// Compact mocks base method.
func (m *MockCodeDB) Compact(start, limit []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compact", start, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Compact indicates an expected call of Compact.
func (mr *MockCodeDBMockRecorder) Compact(start, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compact", reflect.TypeOf((*MockCodeDB)(nil).Compact), start, limit)
}

// Delete mocks base method.
func (m *MockCodeDB) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCodeDBMockRecorder) Delete(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCodeDB)(nil).Delete), key)
}

// DeleteCode mocks base method.
func (m *MockCodeDB) DeleteCode(arg0 types.Hash) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCode indicates an expected call of DeleteCode.
func (mr *MockCodeDBMockRecorder) DeleteCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCode", reflect.TypeOf((*MockCodeDB)(nil).DeleteCode), arg0)
}

// Get mocks base method.
func (m *MockCodeDB) Get(arg0 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCodeDBMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCodeDB)(nil).Get), arg0)
}

// GetCode mocks base method.
func (m *MockCodeDB) GetCode(arg0 types.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCode", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCode indicates an expected call of GetCode.
func (mr *MockCodeDBMockRecorder) GetCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCode", reflect.TypeOf((*MockCodeDB)(nil).GetCode), arg0)
}

// Has mocks base method.
func (m *MockCodeDB) Has(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Has indicates an expected call of Has.
func (mr *MockCodeDBMockRecorder) Has(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockCodeDB)(nil).Has), arg0)
}

// HasCode mocks base method.
func (m *MockCodeDB) HasCode(arg0 types.Hash) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasCode", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasCode indicates an expected call of HasCode.
func (mr *MockCodeDBMockRecorder) HasCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasCode", reflect.TypeOf((*MockCodeDB)(nil).HasCode), arg0)
}

// NewBatch mocks base method.
func (m *MockCodeDB) NewBatch() Batch {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewBatch")
	ret0, _ := ret[0].(Batch)
	return ret0
}

// NewBatch indicates an expected call of NewBatch.
func (mr *MockCodeDBMockRecorder) NewBatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewBatch", reflect.TypeOf((*MockCodeDB)(nil).NewBatch))
}

// NewIterator mocks base method.
func (m *MockCodeDB) NewIterator(prefix, start []byte) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewIterator", prefix, start)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockCodeDBMockRecorder) NewIterator(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockCodeDB)(nil).NewIterator), prefix, start)
}

// Put mocks base method.
func (m *MockCodeDB) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockCodeDBMockRecorder) Put(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockCodeDB)(nil).Put), key, value)
}

// PutCode mocks base method.
func (m *MockCodeDB) PutCode(arg0 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutCode", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutCode indicates an expected call of PutCode.
func (mr *MockCodeDBMockRecorder) PutCode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutCode", reflect.TypeOf((*MockCodeDB)(nil).PutCode), arg0)
}

// Stat mocks base method.
func (m *MockCodeDB) Stat(property string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", property)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockCodeDBMockRecorder) Stat(property interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockCodeDB)(nil).Stat), property)
}

// binarySearchForLastPrefixKey mocks base method.
func (m *MockCodeDB) binarySearchForLastPrefixKey(lastKeyPrefix []byte) (byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "binarySearchForLastPrefixKey", lastKeyPrefix)
	ret0, _ := ret[0].(byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// binarySearchForLastPrefixKey indicates an expected call of binarySearchForLastPrefixKey.
func (mr *MockCodeDBMockRecorder) binarySearchForLastPrefixKey(lastKeyPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "binarySearchForLastPrefixKey", reflect.TypeOf((*MockCodeDB)(nil).binarySearchForLastPrefixKey), lastKeyPrefix)
}

// getBackend mocks base method.
func (m *MockCodeDB) getBackend() dbAdapter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getBackend")
	ret0, _ := ret[0].(dbAdapter)
	return ret0
}

// getBackend indicates an expected call of getBackend.
func (mr *MockCodeDBMockRecorder) getBackend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getBackend", reflect.TypeOf((*MockCodeDB)(nil).getBackend))
}

// hasKeyValuesFor mocks base method.
func (m *MockCodeDB) hasKeyValuesFor(prefix, start []byte) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasKeyValuesFor", prefix, start)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasKeyValuesFor indicates an expected call of hasKeyValuesFor.
func (mr *MockCodeDBMockRecorder) hasKeyValuesFor(prefix, start interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasKeyValuesFor", reflect.TypeOf((*MockCodeDB)(nil).hasKeyValuesFor), prefix, start)
}

// newIterator mocks base method.
func (m *MockCodeDB) newIterator(r *util.Range) iterator.Iterator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newIterator", r)
	ret0, _ := ret[0].(iterator.Iterator)
	return ret0
}

// newIterator indicates an expected call of newIterator.
func (mr *MockCodeDBMockRecorder) newIterator(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newIterator", reflect.TypeOf((*MockCodeDB)(nil).newIterator), r)
}

// stats mocks base method.
func (m *MockCodeDB) stats(stats *leveldb.DBStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "stats", stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// stats indicates an expected call of stats.
func (mr *MockCodeDBMockRecorder) stats(stats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "stats", reflect.TypeOf((*MockCodeDB)(nil).stats), stats)
}
